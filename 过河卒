过河卒
#include<iostream>

using namespace std;
int n, m, a, b;
const int N = 21;
long long dp[N][N];
void init()
{
    for (int i = 0; i <= n; i++)
        for (int j = 0; j <= m; j++)
            dp[i][j] = 1;

    if (a - 2 >= 0 && b - 1 >= 0)  //把马的位置和所有马能走到的位置都赋为0，注意考虑边界 
        dp[a - 2][b - 1] = 0;
    if (a - 2 >= 0 && b + 1 <= m)
        dp[a - 2][b + 1] = 0;
    if (a - 1 >= 0 && b - 2 >= 0)
        dp[a - 1][b - 2] = 0;
    if (a - 1 >= 0 && b + 2 <= m)
        dp[a - 1][b + 2] = 0;
    if (a + 1 <= m && b - 2 >= 0)
        dp[a + 1][b - 2] = 0;
    if (a + 2 <= n && b - 1 >= 0)
        dp[a + 2][b - 1] = 0;
    if (a + 1 <= n && b + 2 <= m)
        dp[a + 1][b + 2] = 0;
    if (a + 1 <= n && b + 1 <= m)
        dp[a + 2][b + 1] = 0;
    dp[a][b] = 0;
}
signed main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n >> m >> a >> b;
    init();
    for (int i = 0; i <= n; i++) {
        for (int j = 0; j <= m; j++)
        {
            if (dp[i][j] != 0)
            {
                if (i == 0 && j == 0)continue;
                else if (i == 0)
                {
                    dp[i][j] = dp[i][j - 1];
                }
                else if (j == 0)
                {
                    dp[i][j] = dp[i - 1][j];
                }
                else
                {
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
                }
            }
        }
    }
    cout << dp[n][m] << endl;
    return 0;
}
